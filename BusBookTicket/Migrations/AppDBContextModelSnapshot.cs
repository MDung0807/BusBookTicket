// <auto-generated />
using System;
using BusBookTicket.Models.EntityFW;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusBookTicket.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusBookTicket.Models.Entity.Account", b =>
                {
                    b.Property<int>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("accountID"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accountID");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Bus", b =>
                {
                    b.Property<int>("busID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("busID"));

                    b.Property<string>("busNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("busNumber");

                    b.Property<int?>("busTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("companyID")
                        .HasColumnType("int");

                    b.HasKey("busID");

                    b.HasIndex("busTypeID");

                    b.HasIndex("companyID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.BusType", b =>
                {
                    b.Property<int>("busTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("busTypeID"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalSeats")
                        .HasColumnType("int");

                    b.HasKey("busTypeID");

                    b.ToTable("BusesType");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Company", b =>
                {
                    b.Property<int>("companyID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("companyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<int>("accountID")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("accountID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Bus", b =>
                {
                    b.HasOne("BusBookTicket.Models.Entity.BusType", "busType")
                        .WithMany()
                        .HasForeignKey("busTypeID");

                    b.HasOne("BusBookTicket.Models.Entity.Company", "company")
                        .WithMany("buses")
                        .HasForeignKey("companyID");

                    b.Navigation("busType");

                    b.Navigation("company");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Company", b =>
                {
                    b.HasOne("BusBookTicket.Models.Entity.Account", "account")
                        .WithOne("company")
                        .HasForeignKey("BusBookTicket.Models.Entity.Company", "companyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Customer", b =>
                {
                    b.HasOne("BusBookTicket.Models.Entity.Account", "account")
                        .WithOne("customer")
                        .HasForeignKey("BusBookTicket.Models.Entity.Customer", "accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Account", b =>
                {
                    b.Navigation("company")
                        .IsRequired();

                    b.Navigation("customer")
                        .IsRequired();
                });

            modelBuilder.Entity("BusBookTicket.Models.Entity.Company", b =>
                {
                    b.Navigation("buses");
                });
#pragma warning restore 612, 618
        }
    }
}
